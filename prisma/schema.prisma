// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Date {
    id String @id @default(cuid())
    date String @unique //year/month/day
    entriesInitial TimelineEntry[] @relation("entriesInitial")
    entriesFinal TimelineEntry[] @relation("entriesFinal")
}

model Tag{
    id String @id @default(cuid())
    name String @unique
    entries TimelineEntry[]
}

model TimelineEntry {
    id String @id @default(cuid())
    type String
    title String
    initialDate Date @relation("entriesInitial", fields: [initialDateId], references: [id])
    initialDateId String
    finalDate Date? @relation("entriesFinal", fields: [finalDateId], references: [id])
    finalDateId String?
    description String
    tags Tag[]
    more String?
    positioning String
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId            String
}

model UserPreference {
    id                String  @id @default(cuid())
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId            String  @unique
    mainAxis          Int
    crossAxis         Int
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    userPreference   UserPreference?
    role             String? @default("client")
    Timeline      TimelineEntry[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
